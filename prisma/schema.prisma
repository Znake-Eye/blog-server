// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  identify String?
  email String?
  password String
  phone String?
  roleType RoleType @default(USER)
  status UserStatus? @default(ACTIVE)
  currentToken String?
  image String?
  createdAt DateTime @default(now())
  posts Post[]
  products Product[]
  carts Cart[]
  favorites Favorite[]
  // orders Order[]
  buyerOrders Order[] @relation("BuyerOrders")
  sellerOrders Order[] @relation("SellerOrders")
  payments Payment[]
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  createdAt DateTime @default(now())
  posts Post[]
  products Product[]
}

model Post {
  id Int @id @default(autoincrement())
  title String
  content String
  createdAt DateTime @default(now())
  published Boolean @default(false)
  authorId Int
  author User @relation(fields: [authorId], references: [id])
  cateId Int?
  category Category? @relation(fields: [cateId], references: [id])
}

model Product {
  id Int @id @default(autoincrement())
  userId Int
  categoryId Int?
  name String
  description String?
  price Float?
  discount Float @default(0)
  stock_status StockSTatus @default(INSTOCK)
  image String?
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  carts Cart[]
  favorites Favorite[]
  orderItems OrderItem[]

}

model Cart {
  id Int @id @default(autoincrement())
  userId Int
  productId Int
  qty Int @default(1)
  item_price Float
  createdAt DateTime @default(now())
  product Product @relation(fields: [productId], references: [id])
  user User @relation(fields: [userId], references: [id])
  @@unique([userId, productId])
}

model Favorite {
  id Int @id @default(autoincrement())
  userId Int
  productId Int
  status FavoriteStatus @default(LIKE)
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
  @@unique([userId, productId])
}

model Order {
  id Int @id @default(autoincrement())
  userId Int
  sellerId Int
  total_price Float
  status OrderStatus @default(ORDERED)
  orderDate DateTime @default(now())
  user User @relation("BuyerOrders",fields: [userId], references: [id])
  seller User @relation("SellerOrders",fields: [sellerId], references: [id])
  orderItems OrderItem[]
  payment Payment?
}

model OrderItem {
  id Int @id @default(autoincrement())
  orderId Int
  productId Int
  qty Int
  item_price Float
  total_price Float
  order Order @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

}

model Payment {
  id Int @id @default(autoincrement())
  userId Int
  orderId Int @unique
  payment_method String
  pay_date DateTime @default(now())
  amount Float
  status PayStatus @default(PENDING)
  user User @relation(fields: [userId], references: [id])
  order Order @relation(fields: [orderId], references: [id])

}

enum UserStatus {
  ACTIVE
  DEACTIVE
  SYSTEM
  BLOCK
}

enum RoleType {
  ADMIN
  USER
}

enum StockSTatus {
  INSTOCK
  OUTSTOCK
}

enum FavoriteStatus {
  LIKE
  DISLIKE
}

enum OrderStatus {
  ORDERED
  FAILED
  SHIPPED
  SUCCESS
}

enum PayStatus {
  FAILED
  PENDING
  SUCCESS
}